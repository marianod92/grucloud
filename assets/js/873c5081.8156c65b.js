"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8701],{3905:function(e,n,r){r.d(n,{Zo:function(){return p},kt:function(){return m}});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=t.createContext({}),c=function(e){var n=t.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},S=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),S=c(r),m=a,l=S["".concat(d,".").concat(m)]||S[m]||u[m]||i;return r?t.createElement(l,o(o({ref:n},p),{},{components:r})):t.createElement(l,o({ref:n},p))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=S;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}S.displayName="MDXCreateElement"},36209:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return c},toc:function(){return p},default:function(){return S}});var t=r(87462),a=r(63366),i=(r(67294),r(3905)),o=["components"],s={id:"ContainerService",title:"ContainerService"},d=void 0,c={unversionedId:"azure/resources/ContainerService/ContainerService",id:"azure/resources/ContainerService/ContainerService",isDocsHomePage:!1,title:"ContainerService",description:"Provides a ContainerService from the ContainerService group",source:"@site/docs/azure/resources/ContainerService/ContainerService.md",sourceDirName:"azure/resources/ContainerService",slug:"/azure/resources/ContainerService/ContainerService",permalink:"/docs/azure/resources/ContainerService/ContainerService",tags:[],version:"current",frontMatter:{id:"ContainerService",title:"ContainerService"},sidebar:"docs",previous:{title:"AgentPool",permalink:"/docs/azure/resources/ContainerService/AgentPool"},next:{title:"MaintenanceConfiguration",permalink:"/docs/azure/resources/ContainerService/MaintenanceConfiguration"}},p=[{value:"Examples",id:"examples",children:[{value:"Create/Update Container Service",id:"createupdate-container-service",children:[],level:3}],level:2},{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"Swagger Schema",id:"swagger-schema",children:[],level:2},{value:"Misc",id:"misc",children:[],level:2}],u={toc:p};function S(e){var n=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Provides a ",(0,i.kt)("strong",{parentName:"p"},"ContainerService")," from the ",(0,i.kt)("strong",{parentName:"p"},"ContainerService")," group"),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"createupdate-container-service"},"Create/Update Container Service"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'provider.ContainerService.makeContainerService({\n  name: "myContainerService",\n  properties: () => ({ location: "location1" }),\n  dependencies: ({ resources }) => ({\n    resourceGroup: resources.Resources.ResourceGroup["myResourceGroup"],\n  }),\n});\n\n')),(0,i.kt)("h2",{id:"dependencies"},"Dependencies"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/azure/resources/Resources/ResourceGroup"},"ResourceGroup"))),(0,i.kt)("h2",{id:"swagger-schema"},"Swagger Schema"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  properties: {\n    properties: {\n      'x-ms-client-flatten': true,\n      properties: {\n        provisioningState: {\n          readOnly: true,\n          type: 'string',\n          description: 'the current deployment or provisioning state, which only appears in the response.'\n        },\n        orchestratorProfile: {\n          description: 'Properties of the orchestrator.',\n          properties: {\n            orchestratorType: {\n              type: 'string',\n              enum: [ 'Swarm', 'DCOS', 'Custom', 'Kubernetes' ],\n              'x-ms-enum': {\n                name: 'ContainerServiceOrchestratorTypes',\n                modelAsString: false\n              },\n              description: 'The orchestrator to use to manage container service cluster resources. Valid values are Swarm, DCOS, and Custom.'\n            }\n          },\n          required: [ 'orchestratorType' ]\n        },\n        customProfile: {\n          description: 'Properties for custom clusters.',\n          properties: {\n            orchestrator: {\n              type: 'string',\n              description: 'The name of the custom orchestrator to use.'\n            }\n          },\n          required: [ 'orchestrator' ]\n        },\n        servicePrincipalProfile: {\n          description: 'Properties for cluster service principals.',\n          properties: {\n            clientId: {\n              type: 'string',\n              description: 'The ID for the service principal.'\n            },\n            secret: {\n              type: 'string',\n              description: 'The secret password associated with the service principal.'\n            }\n          },\n          required: [ 'clientId', 'secret' ]\n        },\n        masterProfile: {\n          description: 'Properties of master agents.',\n          properties: {\n            count: {\n              type: 'integer',\n              format: 'int32',\n              enum: [ 1, 3, 5 ],\n              description: 'Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The default value is 1.',\n              default: 1\n            },\n            dnsPrefix: {\n              type: 'string',\n              description: 'DNS prefix to be used to create the FQDN for master.'\n            },\n            fqdn: {\n              readOnly: true,\n              type: 'string',\n              description: 'FQDN for the master.'\n            }\n          },\n          required: [ 'dnsPrefix' ]\n        },\n        agentPoolProfiles: {\n          type: 'array',\n          items: {\n            properties: {\n              name: {\n                type: 'string',\n                description: 'Unique name of the agent pool profile in the context of the subscription and resource group.'\n              },\n              count: {\n                type: 'integer',\n                format: 'int32',\n                maximum: 100,\n                minimum: 1,\n                description: 'Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. ',\n                default: 1\n              },\n              vmSize: {\n                type: 'string',\n                enum: [\n                  'Standard_A0',     'Standard_A1',     'Standard_A2',\n                  'Standard_A3',     'Standard_A4',     'Standard_A5',\n                  'Standard_A6',     'Standard_A7',     'Standard_A8',\n                  'Standard_A9',     'Standard_A10',    'Standard_A11',\n                  'Standard_D1',     'Standard_D2',     'Standard_D3',\n                  'Standard_D4',     'Standard_D11',    'Standard_D12',\n                  'Standard_D13',    'Standard_D14',    'Standard_D1_v2',\n                  'Standard_D2_v2',  'Standard_D3_v2',  'Standard_D4_v2',\n                  'Standard_D5_v2',  'Standard_D11_v2', 'Standard_D12_v2',\n                  'Standard_D13_v2', 'Standard_D14_v2', 'Standard_G1',\n                  'Standard_G2',     'Standard_G3',     'Standard_G4',\n                  'Standard_G5',     'Standard_DS1',    'Standard_DS2',\n                  'Standard_DS3',    'Standard_DS4',    'Standard_DS11',\n                  'Standard_DS12',   'Standard_DS13',   'Standard_DS14',\n                  'Standard_GS1',    'Standard_GS2',    'Standard_GS3',\n                  'Standard_GS4',    'Standard_GS5'\n                ],\n                'x-ms-enum': {\n                  name: 'ContainerServiceVMSizeTypes',\n                  modelAsString: true\n                },\n                description: 'Size of agent VMs.'\n              },\n              dnsPrefix: {\n                type: 'string',\n                description: 'DNS prefix to be used to create the FQDN for the agent pool.'\n              },\n              fqdn: {\n                readOnly: true,\n                type: 'string',\n                description: 'FQDN for the agent pool.'\n              }\n            },\n            required: [ 'name', 'dnsPrefix', 'count', 'vmSize' ],\n            description: 'Profile for the container service agent pool.'\n          },\n          description: 'Properties of the agent pool.'\n        },\n        windowsProfile: {\n          description: 'Properties of Windows VMs.',\n          properties: {\n            adminUsername: {\n              type: 'string',\n              description: 'The administrator username to use for Windows VMs.',\n              pattern: '^[a-zA-Z0-9]+([._]?[a-zA-Z0-9]+)*$'\n            },\n            adminPassword: {\n              type: 'string',\n              description: 'The administrator password to use for Windows VMs.',\n              pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%\\\\^&\\\\*\\\\(\\\\)])[a-zA-Z\\\\d!@#$%\\\\^&\\\\*\\\\(\\\\)]{12,123}$'\n            }\n          },\n          required: [ 'adminUsername', 'adminPassword' ]\n        },\n        linuxProfile: {\n          description: 'Properties of Linux VMs.',\n          properties: {\n            adminUsername: {\n              type: 'string',\n              description: 'The administrator username to use for Linux VMs.',\n              pattern: '^[a-z][a-z0-9_-]*$'\n            },\n            ssh: {\n              description: 'The ssh key configuration for Linux VMs.',\n              properties: {\n                publicKeys: {\n                  type: 'array',\n                  items: {\n                    properties: {\n                      keyData: {\n                        type: 'string',\n                        description: 'Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.'\n                      }\n                    },\n                    required: [ 'keyData' ],\n                    description: 'Contains information about SSH certificate public key data.'\n                  },\n                  description: 'the list of SSH public keys used to authenticate with Linux-based VMs.'\n                }\n              },\n              required: [ 'publicKeys' ]\n            }\n          },\n          required: [ 'adminUsername', 'ssh' ]\n        },\n        diagnosticsProfile: {\n          description: 'Properties of the diagnostic agent.',\n          properties: {\n            vmDiagnostics: {\n              description: 'Profile for the container service VM diagnostic agent.',\n              properties: {\n                enabled: {\n                  type: 'boolean',\n                  description: 'Whether the VM diagnostic agent is provisioned on the VM.'\n                },\n                storageUri: {\n                  readOnly: true,\n                  type: 'string',\n                  description: 'The URI of the storage account where diagnostics are stored.'\n                }\n              },\n              required: [ 'enabled' ]\n            }\n          },\n          required: [ 'vmDiagnostics' ]\n        }\n      },\n      required: [ 'masterProfile', 'agentPoolProfiles', 'linuxProfile' ],\n      description: 'Properties of the container service.'\n    }\n  },\n  allOf: [\n    {\n      description: 'The Resource model definition.',\n      properties: {\n        id: { readOnly: true, type: 'string', description: 'Resource Id' },\n        name: {\n          readOnly: true,\n          type: 'string',\n          description: 'Resource name'\n        },\n        type: {\n          readOnly: true,\n          type: 'string',\n          description: 'Resource type'\n        },\n        location: { type: 'string', description: 'Resource location' },\n        tags: {\n          type: 'object',\n          additionalProperties: { type: 'string' },\n          description: 'Resource tags'\n        }\n      },\n      required: [ 'location' ],\n      'x-ms-azure-resource': true\n    }\n  ],\n  description: 'Container service.'\n}\n")),(0,i.kt)("h2",{id:"misc"},"Misc"),(0,i.kt)("p",null,"The resource version is ",(0,i.kt)("inlineCode",{parentName:"p"},"2017-01-31"),"."),(0,i.kt)("p",null,"The Swagger schema used to generate this documentation can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.ContainerService/stable/2017-01-31/containerService.json"},"here"),".\ndescription: 'OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.',\ntype: 'integer',\nformat: 'int32',\nmaximum: 1023,\nminimum: 0\n},\nvnetSubnetID: {\ndescription: \"VNet SubnetID specifies the VNet's subnet identifier.\",\ntype: 'string'\n},\nfirstConsecutiveStaticIP: {\ntype: 'string',\ndescription: 'FirstConsecutiveStaticIP used to specify the first static ip of masters.',\ndefault: '10.240.255.5'\n},\nstorageProfile: {\ndescription: 'Storage profile specifies what kind of storage used. Choose from StorageAccount and ManagedDisks. Leave it empty, we will choose for you based on the orchestrator choice.',\ntype: 'string',\n'x-ms-enum': {\nname: 'ContainerServiceStorageProfileTypes',\nmodelAsString: true\n},\nenum: ","[ 'StorageAccount', 'ManagedDisks' ]","\n},\nfqdn: {\nreadOnly: true,\ntype: 'string',\ndescription: 'FQDN for the master pool.'\n}\n},\nrequired: ","[ 'dnsPrefix', 'vmSize' ]","\n},\nagentPoolProfiles: {\ntype: 'array',\nitems: {\nproperties: {\nname: {\ntype: 'string',\ndescription: 'Unique name of the agent pool profile in the context of the subscription and resource group.'\n},\ncount: {\ntype: 'integer',\nformat: 'int32',\nmaximum: 100,\nminimum: 1,\ndescription: 'Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. ',\ndefault: 1\n},\nvmSize: {\ndescription: 'Size of agent VMs.',\ntype: 'string',\n'x-ms-enum': {\nname: 'ContainerServiceVMSizeTypes',\nmodelAsString: true\n},\nenum: ","[\n'Standard_A1',\n'Standard_A10',\n'Standard_A11',\n'Standard_A1_v2',\n'Standard_A2',\n'Standard_A2_v2',\n'Standard_A2m_v2',\n'Standard_A3',\n'Standard_A4',\n'Standard_A4_v2',\n'Standard_A4m_v2',\n'Standard_A5',\n'Standard_A6',\n'Standard_A7',\n'Standard_A8',\n'Standard_A8_v2',\n'Standard_A8m_v2',\n'Standard_A9',\n'Standard_B2ms',\n'Standard_B2s',\n'Standard_B4ms',\n'Standard_B8ms',\n'Standard_D1',\n'Standard_D11',\n'Standard_D11_v2',\n'Standard_D11_v2_Promo',\n'Standard_D12',\n'Standard_D12_v2',\n'Standard_D12_v2_Promo',\n'Standard_D13',\n'Standard_D13_v2',\n'Standard_D13_v2_Promo',\n'Standard_D14',\n'Standard_D14_v2',\n'Standard_D14_v2_Promo',\n'Standard_D15_v2',\n'Standard_D16_v3',\n'Standard_D16s_v3',\n'Standard_D1_v2',\n'Standard_D2',\n'Standard_D2_v2',\n'Standard_D2_v2_Promo',\n'Standard_D2_v3',\n'Standard_D2s_v3',\n'Standard_D3',\n'Standard_D32_v3',\n'Standard_D32s_v3',\n'Standard_D3_v2',\n'Standard_D3_v2_Promo',\n'Standard_D4',\n'Standard_D4_v2',\n'Standard_D4_v2_Promo',\n'Standard_D4_v3',\n'Standard_D4s_v3',\n'Standard_D5_v2',\n'Standard_D5_v2_Promo',\n'Standard_D64_v3',\n'Standard_D64s_v3',\n'Standard_D8_v3',\n'Standard_D8s_v3',\n'Standard_DS1',\n'Standard_DS11',\n'Standard_DS11_v2',\n'Standard_DS11_v2_Promo',\n'Standard_DS12',\n'Standard_DS12_v2',\n'Standard_DS12_v2_Promo',\n'Standard_DS13',\n'Standard_DS13-2_v2',\n'Standard_DS13-4_v2',\n'Standard_DS13_v2',\n'Standard_DS13_v2_Promo',\n'Standard_DS14',\n'Standard_DS14-4_v2',\n'Standard_DS14-8_v2',\n'Standard_DS14_v2',\n'Standard_DS14_v2_Promo',\n'Standard_DS15_v2',\n'Standard_DS1_v2',\n'Standard_DS2',\n'Standard_DS2_v2',\n'Standard_DS2_v2_Promo',\n'Standard_DS3',\n'Standard_DS3_v2',\n'Standard_DS3_v2_Promo',\n'Standard_DS4',\n'Standard_DS4_v2',\n'Standard_DS4_v2_Promo',\n'Standard_DS5_v2',\n'Standard_DS5_v2_Promo',\n'Standard_E16_v3',\n'Standard_E16s_v3',\n'Standard_E2_v3',\n'Standard_E2s_v3',\n'Standard_E32-16s_v3',\n'Standard_E32-8s_v3',\n'Standard_E32_v3',\n'Standard_E32s_v3',\n'Standard_E4_v3',\n'Standard_E4s_v3',\n... 74 more items\n]","\n},\nosDiskSizeGB: {\ndescription: 'OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.',\ntype: 'integer',\nformat: 'int32',\nmaximum: 1023,\nminimum: 0\n},\ndnsPrefix: {\ntype: 'string',\ndescription: 'DNS prefix to be used to create the FQDN for the agent pool.'\n},\nfqdn: {\nreadOnly: true,\ntype: 'string',\ndescription: 'FQDN for the agent pool.'\n},\nports: {\ntype: 'array',\nitems: { type: 'integer', minimum: 1, maximum: 65535 },\ndescription: 'Ports number array used to expose on this agent pool. The default opened ports are different based on your choice of orchestrator.'\n},\nstorageProfile: {\ndescription: 'Storage profile specifies what kind of storage used. Choose from StorageAccount and ManagedDisks. Leave it empty, we will choose for you based on the orchestrator choice.',\ntype: 'string',\n'x-ms-enum': {\nname: 'ContainerServiceStorageProfileTypes',\nmodelAsString: true\n},\nenum: ","[ 'StorageAccount', 'ManagedDisks' ]","\n},\nvnetSubnetID: {\ndescription: \"VNet SubnetID specifies the VNet's subnet identifier.\",\ntype: 'string'\n},\nosType: {\ndescription: 'OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.',\ntype: 'string',\ndefault: 'Linux',\nenum: ","[ 'Linux', 'Windows' ]",",\n'x-ms-enum': { name: 'OSType', modelAsString: true }\n}\n},\nrequired: ","[ 'name', 'vmSize' ]",",\ndescription: 'Profile for the container service agent pool.'\n},\ndescription: 'Properties of the agent pool.'\n},\nwindowsProfile: {\ndescription: 'Profile for Windows VMs in the container service cluster.',\nproperties: {\nadminUsername: {\ntype: 'string',\ndescription: 'The administrator username to use for Windows VMs.',\npattern: '^","[a-zA-Z0-9]","+(","[._]","?","[a-zA-Z0-9]","+)",(0,i.kt)("em",{parentName:"p"},"$'\n},\nadminPassword: {\ntype: 'string',\ndescription: 'The administrator password to use for Windows VMs.',\npattern: '^(?=."),"[a-z]",")(?=.",(0,i.kt)("em",{parentName:"p"},"[A-Z]",")(?=."),"[!@#$%","\\","^&","\\","*","\\","(","\\",")]",")","[a-zA-Z","\\","d!@#$%","\\","^&","\\","*","\\","(","\\",")]","{12,123}$'\n}\n},\nrequired: ","[ 'adminUsername', 'adminPassword' ]","\n},\nlinuxProfile: {\ndescription: 'Profile for Linux VMs in the container service cluster.',\nproperties: {\nadminUsername: {\ntype: 'string',\ndescription: 'The administrator username to use for Linux VMs.',\npattern: '^","[A-Za-z][-A-Za-z0-9_]","*$'\n},\nssh: {\ndescription: 'SSH configuration for Linux-based VMs running on Azure.',\nproperties: {\npublicKeys: {\ntype: 'array',\nitems: {\nproperties: {\nkeyData: {\ntype: 'string',\ndescription: 'Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.'\n}\n},\nrequired: ","[ 'keyData' ]",",\ndescription: 'Contains information about SSH certificate public key data.'\n},\ndescription: 'The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key specified.'\n}\n},\nrequired: ","[ 'publicKeys' ]","\n}\n},\nrequired: ","[ 'adminUsername', 'ssh' ]","\n},\ndiagnosticsProfile: {\ndescription: 'Profile for diagnostics in the container service cluster.',\nproperties: {\nvmDiagnostics: {\ndescription: 'Profile for diagnostics on the container service VMs.',\nproperties: {\nenabled: {\ntype: 'boolean',\ndescription: 'Whether the VM diagnostic agent is provisioned on the VM.'\n},\nstorageUri: {\nreadOnly: true,\ntype: 'string',\ndescription: 'The URI of the storage account where diagnostics are stored.'\n}\n},\nrequired: ","[ 'enabled' ]","\n}\n},\nrequired: ","[ 'vmDiagnostics' ]","\n}\n},\nrequired: ","[ 'orchestratorProfile', 'masterProfile', 'linuxProfile' ]","\n}\n}\n}\n],\ndescription: 'Container service.'\n}"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"## Misc\nThe resource version is `2017-07-01`.\n\nThe Swagger schema used to generate this documentation can be found [here](https://github.com/Azure/azure-rest-api-specs/tree/main/specification/containerservice/resource-manager/Microsoft.ContainerService/stable/2017-07-01/containerService.json).\n")))}S.isMDXComponent=!0}}]);