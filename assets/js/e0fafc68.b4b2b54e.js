"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8641],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(t),m=i,y=d["".concat(u,".").concat(m)]||d[m]||l[m]||o;return t?r.createElement(y,s(s({ref:n},p),{},{components:t})):r.createElement(y,s({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=d;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},76725:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),s=["components"],a={id:"BuildTask",title:"BuildTask"},u=void 0,c={unversionedId:"azure/resources/ContainerRegistry/BuildTask",id:"azure/resources/ContainerRegistry/BuildTask",isDocsHomePage:!1,title:"BuildTask",description:"Provides a BuildTask from the ContainerRegistry group",source:"@site/docs/azure/resources/ContainerRegistry/BuildTask.md",sourceDirName:"azure/resources/ContainerRegistry",slug:"/azure/resources/ContainerRegistry/BuildTask",permalink:"/docs/azure/resources/ContainerRegistry/BuildTask",tags:[],version:"current",frontMatter:{id:"BuildTask",title:"BuildTask"},sidebar:"docs",previous:{title:"BuildStep",permalink:"/docs/azure/resources/ContainerRegistry/BuildStep"},next:{title:"ConnectedRegistry",permalink:"/docs/azure/resources/ContainerRegistry/ConnectedRegistry"}},p=[{value:"Examples",id:"examples",children:[{value:"BuildTasks_Create",id:"buildtasks_create",children:[],level:3}],level:2},{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"Swagger Schema",id:"swagger-schema",children:[],level:2},{value:"Misc",id:"misc",children:[],level:2}],l={toc:p};function d(e){var n=e.components,t=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Provides a ",(0,o.kt)("strong",{parentName:"p"},"BuildTask")," from the ",(0,o.kt)("strong",{parentName:"p"},"ContainerRegistry")," group"),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"buildtasks_create"},"BuildTasks_Create"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'exports.createResources = () => [\n  {\n    type: "BuildTask",\n    group: "ContainerRegistry",\n    name: "myBuildTask",\n    properties: () => ({\n      properties: {\n        sourceRepository: {\n          sourceControlType: "Github",\n          repositoryUrl: "https://github.com/Azure/azure-rest-api-specs",\n          sourceControlAuthProperties: {\n            tokenType: "OAuth",\n            token: "xxxxxx",\n            scope: "repo",\n          },\n          isCommitTriggerEnabled: true,\n        },\n        platform: { osType: "Linux", cpu: 2 },\n        alias: "myalias",\n        status: "Enabled",\n      },\n      location: "eastus",\n      tags: { testkey: "value" },\n    }),\n    dependencies: ({}) => ({\n      resourceGroup: "myResourceGroup",\n      registry: "myRegistry",\n    }),\n  },\n];\n\n')),(0,o.kt)("h2",{id:"dependencies"},"Dependencies"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/azure/resources/Resources/ResourceGroup"},"ResourceGroup")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/azure/resources/ContainerRegistry/Registry"},"Registry"))),(0,o.kt)("h2",{id:"swagger-schema"},"Swagger Schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{\n  description: 'The build task that has the resource properties and all build items. The build task will have all information to schedule a build against it.',\n  type: 'object',\n  allOf: [\n    {\n      description: 'An Azure resource.',\n      required: [ 'location' ],\n      properties: {\n        id: {\n          description: 'The resource ID.',\n          type: 'string',\n          readOnly: true\n        },\n        name: {\n          description: 'The name of the resource.',\n          type: 'string',\n          readOnly: true\n        },\n        type: {\n          description: 'The type of the resource.',\n          type: 'string',\n          readOnly: true\n        },\n        location: {\n          description: 'The location of the resource. This cannot be changed after the resource is created.',\n          type: 'string',\n          'x-ms-mutability': [ 'read', 'create' ]\n        },\n        tags: {\n          description: 'The tags of the resource.',\n          type: 'object',\n          additionalProperties: { type: 'string' },\n          'x-ms-mutability': [ 'read', 'create', 'update' ]\n        }\n      },\n      'x-ms-azure-resource': true\n    }\n  ],\n  properties: {\n    properties: {\n      description: 'The properties of a build task.',\n      'x-ms-client-flatten': true,\n      required: [ 'alias', 'sourceRepository', 'platform' ],\n      type: 'object',\n      properties: {\n        provisioningState: {\n          description: 'The provisioning state of the build task.',\n          enum: [\n            'Creating',\n            'Updating',\n            'Deleting',\n            'Succeeded',\n            'Failed',\n            'Canceled'\n          ],\n          type: 'string',\n          readOnly: true,\n          'x-ms-enum': { name: 'ProvisioningState', modelAsString: true }\n        },\n        creationDate: {\n          format: 'date-time',\n          description: 'The creation date of build task.',\n          type: 'string',\n          readOnly: true\n        },\n        alias: {\n          description: 'The alternative updatable name for a build task.',\n          type: 'string'\n        },\n        status: {\n          description: 'The current status of build task.',\n          enum: [ 'Disabled', 'Enabled' ],\n          type: 'string',\n          'x-ms-enum': { name: 'BuildTaskStatus', modelAsString: true }\n        },\n        sourceRepository: {\n          description: 'The properties that describes the source(code) for the build task.',\n          required: [ 'sourceControlType', 'repositoryUrl' ],\n          type: 'object',\n          properties: {\n            sourceControlType: {\n              description: 'The type of source control service.',\n              enum: [ 'Github', 'VisualStudioTeamService' ],\n              type: 'string',\n              'x-ms-enum': { name: 'SourceControlType', modelAsString: true }\n            },\n            repositoryUrl: {\n              description: 'The full URL to the source code repository',\n              type: 'string'\n            },\n            isCommitTriggerEnabled: {\n              description: 'The value of this property indicates whether the source control commit trigger is enabled or not.',\n              default: false,\n              type: 'boolean'\n            },\n            sourceControlAuthProperties: {\n              description: 'The authorization properties for accessing the source code repository.',\n              required: [ 'token' ],\n              type: 'object',\n              properties: {\n                tokenType: {\n                  description: 'The type of Auth token.',\n                  enum: [ 'PAT', 'OAuth' ],\n                  type: 'string',\n                  'x-ms-enum': { name: 'TokenType', modelAsString: true }\n                },\n                token: {\n                  description: 'The access token used to access the source control provider.',\n                  type: 'string'\n                },\n                refreshToken: {\n                  description: 'The refresh token used to refresh the access token.',\n                  type: 'string'\n                },\n                scope: {\n                  description: 'The scope of the access token.',\n                  type: 'string'\n                },\n                expiresIn: {\n                  format: 'int32',\n                  description: 'Time in seconds that the token remains valid',\n                  type: 'integer'\n                }\n              }\n            }\n          }\n        },\n        platform: {\n          description: 'The platform properties against which the build has to happen.',\n          required: [ 'osType' ],\n          type: 'object',\n          properties: {\n            osType: {\n              description: 'The operating system type required for the build.',\n              enum: [ 'Windows', 'Linux' ],\n              type: 'string',\n              'x-ms-enum': { name: 'OsType', modelAsString: true }\n            },\n            cpu: {\n              format: 'int32',\n              description: 'The CPU configuration in terms of number of cores required for the build.',\n              type: 'integer'\n            }\n          }\n        },\n        timeout: {\n          format: 'int32',\n          description: 'Build timeout in seconds.',\n          default: 3600,\n          maximum: 28800,\n          minimum: 300,\n          type: 'integer'\n        }\n      }\n    }\n  }\n}\n")),(0,o.kt)("h2",{id:"misc"},"Misc"),(0,o.kt)("p",null,"The resource version is ",(0,o.kt)("inlineCode",{parentName:"p"},"2018-02-01-preview"),"."),(0,o.kt)("p",null,"The Swagger schema used to generate this documentation can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Azure/azure-rest-api-specs/tree/main/specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2018-02-01-preview/containerregistry_build.json"},"here"),"."))}d.isMDXComponent=!0}}]);