"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5446],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return l}});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a=o.createContext({}),p=function(e){var n=o.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return o.createElement(a.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=p(t),l=r,h=m["".concat(a,".").concat(l)]||m[l]||d[l]||i;return t?o.createElement(h,s(s({ref:n},u),{},{components:t})):o.createElement(h,s({ref:n},u))}));function l(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=m;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var p=2;p<i;p++)s[p]=t[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},56633:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return a},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var o=t(87462),r=t(63366),i=(t(67294),t(3905)),s=["components"],c={id:"ConnectionMonitor",title:"ConnectionMonitor"},a=void 0,p={unversionedId:"azure/resources/Network/ConnectionMonitor",id:"azure/resources/Network/ConnectionMonitor",isDocsHomePage:!1,title:"ConnectionMonitor",description:"Provides a ConnectionMonitor from the Network group",source:"@site/docs/azure/resources/Network/ConnectionMonitor.md",sourceDirName:"azure/resources/Network",slug:"/azure/resources/Network/ConnectionMonitor",permalink:"/docs/azure/resources/Network/ConnectionMonitor",tags:[],version:"current",frontMatter:{id:"ConnectionMonitor",title:"ConnectionMonitor"},sidebar:"docs",previous:{title:"BastionHost",permalink:"/docs/azure/resources/Network/BastionHost"},next:{title:"ConnectivityConfiguration",permalink:"/docs/azure/resources/Network/ConnectivityConfiguration"}},u=[{value:"Examples",id:"examples",children:[{value:"Create connection monitor V1",id:"create-connection-monitor-v1",children:[],level:3},{value:"Create connection monitor V2",id:"create-connection-monitor-v2",children:[],level:3}],level:2},{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"Swagger Schema",id:"swagger-schema",children:[],level:2},{value:"Misc",id:"misc",children:[],level:2}],d={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Provides a ",(0,i.kt)("strong",{parentName:"p"},"ConnectionMonitor")," from the ",(0,i.kt)("strong",{parentName:"p"},"Network")," group"),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"create-connection-monitor-v1"},"Create connection monitor V1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'provider.Network.makeConnectionMonitor({\n  name: "myConnectionMonitor",\n  properties: () => ({\n    location: "eastus",\n    properties: {\n      endpoints: [\n        {\n          name: "source",\n          resourceId:\n            "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/ct1",\n        },\n        { name: "destination", address: "bing.com" },\n      ],\n      testConfigurations: [\n        {\n          name: "tcp",\n          testFrequencySec: 60,\n          protocol: "Tcp",\n          tcpConfiguration: { port: 80 },\n        },\n      ],\n      testGroups: [\n        {\n          name: "tg",\n          testConfigurations: ["tcp"],\n          sources: ["source"],\n          destinations: ["destination"],\n        },\n      ],\n    },\n  }),\n  dependencies: ({ resources }) => ({\n    resourceGroup: resources.Resources.ResourceGroup["myResourceGroup"],\n    workspace: resources.OperationalInsights.Workspace["myWorkspace"],\n    networkWatcher: resources.Network.NetworkWatcher["myNetworkWatcher"],\n  }),\n});\n\n')),(0,i.kt)("h3",{id:"create-connection-monitor-v2"},"Create connection monitor V2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'provider.Network.makeConnectionMonitor({\n  name: "myConnectionMonitor",\n  properties: () => ({\n    properties: {\n      endpoints: [\n        {\n          name: "vm1",\n          resourceId:\n            "/subscriptions/96e68903-0a56-4819-9987-8d08ad6a1f99/resourceGroups/NwRgIrinaCentralUSEUAP/providers/Microsoft.Compute/virtualMachines/vm1",\n        },\n        {\n          name: "CanaryWorkspaceVamshi",\n          resourceId:\n            "/subscriptions/96e68903-0a56-4819-9987-8d08ad6a1f99/resourceGroups/vasamudrRG/providers/Microsoft.OperationalInsights/workspaces/vasamudrWorkspace",\n          filter: {\n            type: "Include",\n            items: [{ type: "AgentAddress", address: "npmuser" }],\n          },\n        },\n        { name: "bing", address: "bing.com" },\n        { name: "google", address: "google.com" },\n      ],\n      testConfigurations: [\n        {\n          name: "testConfig1",\n          testFrequencySec: 60,\n          protocol: "Tcp",\n          tcpConfiguration: { port: 80, disableTraceRoute: false },\n        },\n      ],\n      testGroups: [\n        {\n          name: "test1",\n          disable: false,\n          testConfigurations: ["testConfig1"],\n          sources: ["vm1", "CanaryWorkspaceVamshi"],\n          destinations: ["bing", "google"],\n        },\n      ],\n      outputs: [],\n    },\n  }),\n  dependencies: ({ resources }) => ({\n    resourceGroup: resources.Resources.ResourceGroup["myResourceGroup"],\n    workspace: resources.OperationalInsights.Workspace["myWorkspace"],\n    networkWatcher: resources.Network.NetworkWatcher["myNetworkWatcher"],\n  }),\n});\n\n')),(0,i.kt)("h2",{id:"dependencies"},"Dependencies"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/azure/resources/Resources/ResourceGroup"},"ResourceGroup")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/azure/resources/OperationalInsights/Workspace"},"Workspace")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/azure/resources/Network/NetworkWatcher"},"NetworkWatcher"))),(0,i.kt)("h2",{id:"swagger-schema"},"Swagger Schema"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  properties: {\n    location: { type: 'string', description: 'Connection monitor location.' },\n    tags: {\n      type: 'object',\n      additionalProperties: { type: 'string' },\n      description: 'Connection monitor tags.'\n    },\n    properties: {\n      'x-ms-client-flatten': true,\n      description: 'Properties of the connection monitor.',\n      properties: {\n        source: {\n          description: 'Describes the source of connection monitor.',\n          properties: {\n            resourceId: {\n              type: 'string',\n              description: 'The ID of the resource used as the source by connection monitor.'\n            },\n            port: {\n              type: 'integer',\n              format: 'int32',\n              minimum: 0,\n              maximum: 65535,\n              description: 'The source port used by connection monitor.'\n            }\n          },\n          required: [ 'resourceId' ]\n        },\n        destination: {\n          description: 'Describes the destination of connection monitor.',\n          properties: {\n            resourceId: {\n              type: 'string',\n              description: 'The ID of the resource used as the destination by connection monitor.'\n            },\n            address: {\n              type: 'string',\n              description: 'Address of the connection monitor destination (IP or domain name).'\n            },\n            port: {\n              type: 'integer',\n              format: 'int32',\n              minimum: 0,\n              maximum: 65535,\n              description: 'The destination port used by connection monitor.'\n            }\n          }\n        },\n        autoStart: {\n          type: 'boolean',\n          default: true,\n          description: 'Determines if the connection monitor will start automatically once created.'\n        },\n        monitoringIntervalInSeconds: {\n          type: 'integer',\n          format: 'int32',\n          minimum: 30,\n          maximum: 1800,\n          default: 60,\n          description: 'Monitoring interval in seconds.'\n        },\n        endpoints: {\n          type: 'array',\n          description: 'List of connection monitor endpoints.',\n          items: {\n            properties: {\n              name: {\n                type: 'string',\n                description: 'The name of the connection monitor endpoint.'\n              },\n              type: {\n                type: 'string',\n                enum: [\n                  'AzureVM',\n                  'AzureVNet',\n                  'AzureSubnet',\n                  'ExternalAddress',\n                  'MMAWorkspaceMachine',\n                  'MMAWorkspaceNetwork'\n                ],\n                'x-ms-enum': { name: 'EndpointType', modelAsString: true },\n                description: 'The endpoint type.'\n              },\n              resourceId: {\n                type: 'string',\n                description: 'Resource ID of the connection monitor endpoint.'\n              },\n              address: {\n                type: 'string',\n                description: 'Address of the connection monitor endpoint (IP or domain name).'\n              },\n              filter: {\n                description: 'Filter for sub-items within the endpoint.',\n                properties: {\n                  type: {\n                    type: 'string',\n                    enum: [ 'Include' ],\n                    'x-ms-enum': {\n                      name: 'ConnectionMonitorEndpointFilterType',\n                      modelAsString: true\n                    },\n                    description: \"The behavior of the endpoint filter. Currently only 'Include' is supported.\"\n                  },\n                  items: {\n                    type: 'array',\n                    description: 'List of items in the filter.',\n                    items: {\n                      properties: {\n                        type: {\n                          type: 'string',\n                          enum: [ 'AgentAddress' ],\n                          'x-ms-enum': {\n                            name: 'ConnectionMonitorEndpointFilterItemType',\n                            modelAsString: true\n                          },\n                          description: \"The type of item included in the filter. Currently only 'AgentAddress' is supported.\"\n                        },\n                        address: {\n                          type: 'string',\n                          description: 'The address of the filter item.'\n                        }\n                      },\n                      description: 'Describes the connection monitor endpoint filter item.'\n                    }\n                  }\n                }\n              },\n              scope: {\n                description: 'Endpoint scope.',\n                properties: {\n                  include: {\n                    type: 'array',\n                    description: 'List of items which needs to be included to the endpoint scope.',\n                    items: {\n                      properties: {\n                        address: {\n                          type: 'string',\n                          description: 'The address of the endpoint item. Supported types are IPv4/IPv6 subnet mask or IPv4/IPv6 IP address.'\n                        }\n                      },\n                      description: 'Describes the connection monitor endpoint scope item.'\n                    }\n                  },\n                  exclude: {\n                    type: 'array',\n                    description: 'List of items which needs to be excluded from the endpoint scope.',\n                    items: {\n                      properties: {\n                        address: {\n                          type: 'string',\n                          description: 'The address of the endpoint item. Supported types are IPv4/IPv6 subnet mask or IPv4/IPv6 IP address.'\n                        }\n                      },\n                      description: 'Describes the connection monitor endpoint scope item.'\n                    }\n                  }\n                }\n              },\n              coverageLevel: {\n                type: 'string',\n                enum: [\n                  'Default',\n                  'Low',\n                  'BelowAverage',\n                  'Average',\n                  'AboveAverage',\n                  'Full'\n                ],\n                'x-ms-enum': { name: 'CoverageLevel', modelAsString: true },\n                description: 'Test coverage for the endpoint.'\n              }\n            },\n            required: [ 'name' ],\n            description: 'Describes the connection monitor endpoint.'\n          }\n        },\n        testConfigurations: {\n          type: 'array',\n          description: 'List of connection monitor test configurations.',\n          items: {\n            properties: {\n              name: {\n                type: 'string',\n                description: 'The name of the connection monitor test configuration.'\n              },\n              testFrequencySec: {\n                type: 'integer',\n                format: 'int32',\n                description: 'The frequency of test evaluation, in seconds.'\n              },\n              protocol: {\n                type: 'string',\n                enum: [ 'Tcp', 'Http', 'Icmp' ],\n                'x-ms-enum': {\n                  name: 'ConnectionMonitorTestConfigurationProtocol',\n                  modelAsString: true\n                },\n                description: 'The protocol to use in test evaluation.'\n              },\n              preferredIPVersion: {\n                type: 'string',\n                enum: [ 'IPv4', 'IPv6' ],\n                'x-ms-enum': { name: 'PreferredIPVersion', modelAsString: true },\n                description: 'The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.'\n              },\n              httpConfiguration: {\n                description: 'The parameters used to perform test evaluation over HTTP.',\n                properties: {\n                  port: {\n                    type: 'integer',\n                    format: 'int32',\n                    minimum: 0,\n                    maximum: 65535,\n                    description: 'The port to connect to.'\n                  },\n                  method: {\n                    type: 'string',\n                    description: 'The HTTP method to use.',\n                    enum: [ 'Get', 'Post' ],\n                    'x-ms-enum': {\n                      name: 'HTTPConfigurationMethod',\n                      modelAsString: true\n                    }\n                  },\n                  path: {\n                    type: 'string',\n                    description: 'The path component of the URI. For instance, \"/dir1/dir2\".'\n                  },\n                  requestHeaders: {\n                    type: 'array',\n                    description: 'The HTTP headers to transmit with the request.',\n                    items: {\n                      properties: {\n                        name: {\n                          type: 'string',\n                          description: 'The name in HTTP header.'\n                        },\n                        value: {\n                          type: 'string',\n                          description: 'The value in HTTP header.'\n                        }\n                      },\n                      description: 'The HTTP header.'\n                    }\n                  },\n                  validStatusCodeRanges: {\n                    type: 'array',\n                    items: { type: 'string' },\n                    description: 'HTTP status codes to consider successful. For instance, \"2xx,301-304,418\".'\n                  },\n                  preferHTTPS: {\n                    type: 'boolean',\n                    description: 'Value indicating whether HTTPS is preferred over HTTP in cases where the choice is not explicit.'\n                  }\n                }\n              },\n              tcpConfiguration: {\n                description: 'The parameters used to perform test evaluation over TCP.',\n                properties: {\n                  port: {\n                    type: 'integer',\n                    format: 'int32',\n                    minimum: 0,\n                    maximum: 65535,\n                    description: 'The port to connect to.'\n                  },\n                  disableTraceRoute: {\n                    type: 'boolean',\n                    description: 'Value indicating whether path evaluation with trace route should be disabled.'\n                  },\n                  destinationPortBehavior: {\n                    type: 'string',\n                    description: 'Destination port behavior.',\n                    enum: [ 'None', 'ListenIfAvailable' ],\n                    'x-ms-enum': {\n                      name: 'DestinationPortBehavior',\n                      modelAsString: true\n                    }\n                  }\n                }\n              },\n              icmpConfiguration: {\n                description: 'The parameters used to perform test evaluation over ICMP.',\n                properties: {\n                  disableTraceRoute: {\n                    type: 'boolean',\n                    description: 'Value indicating whether path evaluation with trace route should be disabled.'\n                  }\n                }\n              },\n              successThreshold: {\n                description: 'The threshold for declaring a test successful.',\n                properties: {\n                  checksFailedPercent: {\n                    type: 'integer',\n                    format: 'int32',\n                    description: 'The maximum percentage of failed checks permitted for a test to evaluate as successful.'\n                  },\n                  roundTripTimeMs: {\n                    type: 'number',\n                    description: 'The maximum round-trip time in milliseconds permitted for a test to evaluate as successful.'\n                  }\n                }\n              }\n            },\n            required: [ 'name', 'protocol' ],\n            description: 'Describes a connection monitor test configuration.'\n          }\n        },\n        testGroups: {\n          type: 'array',\n          description: 'List of connection monitor test groups.',\n          items: {\n            properties: {\n              name: {\n                type: 'string',\n                description: 'The name of the connection monitor test group.'\n              },\n              disable: {\n                type: 'boolean',\n                description: 'Value indicating whether test group is disabled.'\n              },\n              testConfigurations: {\n                type: 'array',\n                items: { type: 'string' },\n                description: 'List of test configuration names.'\n              },\n              sources: {\n                type: 'array',\n                items: { type: 'string' },\n                description: 'List of source endpoint names.'\n              },\n              destinations: {\n                type: 'array',\n                items: { type: 'string' },\n                description: 'List of destination endpoint names.'\n              }\n            },\n            required: [ 'name', 'testConfigurations', 'sources', 'destinations' ],\n            description: 'Describes the connection monitor test group.'\n          }\n        },\n        outputs: {\n          type: 'array',\n          description: 'List of connection monitor outputs.',\n          items: {\n            properties: {\n              type: {\n                type: 'string',\n                description: 'Connection monitor output destination type. Currently, only \"Workspace\" is supported.',\n                enum: [ 'Workspace' ],\n                'x-ms-enum': { name: 'OutputType', modelAsString: true }\n              },\n              workspaceSettings: {\n                description: 'Describes the settings for producing output into a log analytics workspace.',\n                properties: {\n                  workspaceResourceId: {\n                    type: 'string',\n                    description: 'Log analytics workspace resource ID.'\n                  }\n                }\n              }\n            },\n            description: 'Describes a connection monitor output destination.'\n          }\n        },\n        notes: {\n          type: 'string',\n          description: 'Optional notes to be associated with the connection monitor.'\n        }\n      }\n    }\n  },\n  required: [ 'properties' ],\n  description: 'Parameters that define the operation to create a connection monitor.'\n}\n")),(0,i.kt)("h2",{id:"misc"},"Misc"),(0,i.kt)("p",null,"The resource version is ",(0,i.kt)("inlineCode",{parentName:"p"},"2021-05-01"),"."),(0,i.kt)("p",null,"The Swagger schema used to generate this documentation can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/networkWatcher.json"},"here"),"."))}m.isMDXComponent=!0}}]);